#include <Stepper.h>
//#include <stdlib.h> 
double boardx = 7100;
double boardy = 6000;
double x = boardx/2;
double y = boardy/2;
int ZSteps = 2000;
int xTrue = 1;
int yTrue = 1;
int xDP = -1;
int yDP = -1;
int xLag = 80;
int yLag = 145;
int xMeasure = 0;
int yMeasure = 0;

int i = 0;
int k = 0;

int zU = A4;
int zD = A3;
int str = 13;
#define VRX_PIN  A0
#define VRY_PIN  A1
int xValue = 0; 
int yValue = 0; 
int zUC = 0;
int zDC = 0;
int start = 1;

int width = 624;
int height = 525;

int vect[] = {
291,33,290,34,291,34,292,34,293,34,294,33,295,33,296,33,297,33,298,33,299,33,300,33,301,33,302,33,303,33,304,33,305,33,306,33,307,33,308,33,309,33,310,33,311,33,312,33,313,33,314,33,315,33,316,33,317,33,318,33,319,33,320,33,321,33,322,33,323,33,324,33,325,33,326,33,327,33,328,33,329,33,330,33,331,33,332,33,333,33,334,34,335,34,336,34,337,34,338,34,339,34,340,34,341,34,342,34,343,34,344,34,345,35,346,35,347,35,348,35,349,35,350,35,351,35,352,36,353,36,354,36,355,36,356,36,357,37,358,37,359,37,360,37,361,37,362,38,363,38,364,38,365,38,366,39,367,39,368,39,369,39,370,39,371,39,372,40,373,40,374,40,375,41,376,41,377,41,378,42,379,42,380,42,381,42,382,43,383,43,384,43,385,44,386,44,387,44,388,45,389,45,390,45,391,46,392,46,393,46,394,47,395,47,396,48,397,48,398,48,399,49,400,49,401,50,402,50,403,50,404,51,405,51,406,52,407,52,408,53,409,53,410,53,411,54,412,55,413,55,414,56,415,56,416,57,417,57,418,57,419,58,420,58,421,59,422,59,423,60,424,61,425,61,426,62,427,62,428,63,429,63,430,64,431,65,432,65,433,66,434,66,435,67,436,68,437,68,438,69,439,69,440,70,441,71,442,71,443,72,444,73,445,74,446,74,447,75,448,75,449,76,450,77,451,78,452,78,453,79,454,80,455,81,456,82,457,82,458,83,459,84,460,85,461,86,462,87,463,87,464,88,465,89,466,90,467,91,468,92,469,93,470,94,471,95,472,95,473,96,474,97,475,98,476,99,477,100,478,101,479,102,480,103,480,104,481,105,482,106,483,107,484,108,485,109,486,110,487,111,488,112,488,113,489,114,490,115,491,116,492,117,493,118,494,119,494,120,495,121,496,122,497,123,497,124,498,125,499,126,500,127,500,128,501,129,502,130,502,131,503,132,504,133,504,134,505,135,506,136,506,137,507,138,508,139,508,140,509,141,509,142,510,143,510,144,511,145,512,146,512,147,513,148,513,149,514,150,515,151,515,152,516,153,516,154,517,155,517,156,518,157,518,158,519,159,519,160,520,161,520,162,521,163,521,164,521,165,522,166,522,167,523,168,523,169,524,170,524,171,525,172,525,173,525,174,526,175,526,176,526,177,527,178,527,179,528,180,528,181,528,182,529,183,529,184,529,185,530,186,530,187,530,188,531,189,531,190,531,191,532,192,532,193,532,194,533,195,533,196,533,197,533,198,534,199,534,200,534,201,535,202,535,203,535,204,535,205,535,206,536,207,536,208,536,209,536,210,536,211,537,212,537,213,537,214,537,215,537,216,538,217,538,218,538,219,538,220,538,221,539,222,539,223,539,224,539,225,539,226,539,227,539,228,540,229,540,230,540,231,540,232,540,233,540,234,540,235,540,236,540,237,540,238,540,239,540,240,540,241,540,242,541,243,541,244,541,245,541,246,541,247,541,248,541,249,541,250,541,251,541,252,541,253,541,254,541,255,541,256,541,257,541,258,541,259,541,260,541,261,541,262,541,263,541,264,541,265,541,266,541,267,541,268,541,269,541,270,541,271,541,272,540,273,540,274,540,275,540,276,540,277,540,278,540,279,540,280,540,281,540,282,540,283,540,284,539,285,539,286,539,287,539,288,539,289,539,290,539,291,538,292,538,293,538,294,538,295,538,296,537,297,537,298,537,299,537,300,537,301,536,302,536,303,536,304,536,305,535,306,535,307,535,308,535,309,534,310,534,311,534,312,534,313,533,314,533,315,533,316,532,317,532,318,532,319,532,320,531,321,531,322,531,323,530,324,530,325,530,326,529,327,529,328,529,329,528,330,528,331,528,332,527,333,527,334,526,335,526,336,526,337,525,338,525,339,525,340,524,341,524,342,523,343,523,344,522,345,522,346,522,347,521,348,521,349,520,350,520,351,519,352,519,353,518,354,518,355,517,356,517,357,516,358,516,359,515,360,515,361,514,362,514,363,513,364,512,365,512,366,511,367,511,368,510,369,509,370,509,371,508,372,508,373,507,374,506,375,506,376,505,377,504,378,504,379,503,380,502,381,502,382,501,383,500,384,500,385,499,386,498,387,498,388,497,389,496,390,495,391,494,392,494,393,493,394,492,395,491,396,490,397,490,398,489,399,488,400,487,401,486,402,485,403,484,404,483,405,483,406,482,407,481,408,480,409,479,410,478,411,477,412,476,413,475,414,474,415,473,416,472,417,471,418,470,419,469,420,468,420,467,421,466,422,465,423,464,424,463,425,462,426,461,426,460,427,459,428,458,429,457,430,456,430,455,431,454,432,453,433,452,434,451,434,450,435,449,436,448,437,447,437,446,438,445,439,444,439,443,440,442,441,441,441,440,442,439,443,438,443,437,444,436,445,435,445,434,446,433,446,432,447,431,447,430,448,429,449,428,449,427,450,426,451,425,451,424,452,423,452,422,453,421,453,420,454,419,454,418,455,417,455,416,456,415,456,414,457,413,457,412,458,411,458,410,459,409,459,408,460,407,460,406,460,405,461,404,461,403,462,402,462,401,462,400,463,399,463,398,464,397,464,396,464,395,465,394,465,393,466,392,466,391,466,390,467,389,467,388,467,387,468,386,468,385,468,384,469,383,469,382,469,381,470,380,470,379,470,378,471,377,471,376,471,375,471,374,472,373,472,372,472,371,472,370,473,369,473,368,473,367,473,366,474,365,474,364,474,363,474,362,475,361,475,360,475,359,475,358,475,357,476,356,476,355,476,354,476,353,476,352,476,351,477,350,477,349,477,348,477,347,477,346,477,345,477,344,477,343,477,342,478,341,478,340,478,339,478,338,478,337,478,336,478,335,479,334,479,333,479,332,479,331,479,330,479,329,479,328,479,327,479,326,479,325,479,324,479,323,480,322,480,321,480,320,480,319,480,318,480,317,480,316,480,315,480,314,480,313,480,312,480,311,480,310,480,309,480,308,480,307,480,306,480,305,479,304,479,303,479,302,479,301,479,300,479,299,479,298,479,297,479,296,479,295,479,294,479,293,479,292,479,291,478,290,478,289,478,288,478,287,478,286,478,285,478,284,477,283,477,282,477,281,477,280,477,279,477,278,477,277,477,276,477,275,476,274,476,273,476,272,476,271,476,270,476,269,475,268,475,267,475,266,475,265,474,264,474,263,474,262,474,261,473,260,473,259,473,258,473,257,472,256,472,255,472,254,472,253,471,252,471,251,471,250,471,249,470,248,470,247,470,246,469,245,469,244,469,243,469,242,468,241,468,240,468,239,467,238,467,237,467,236,466,235,466,234,466,233,465,232,465,231,464,230,464,229,464,228,463,227,463,226,462,225,462,224,462,223,461,222,461,221,460,220,460,219,459,218,459,217,458,216,458,215,458,214,457,213,457,212,456,211,456,210,455,209,455,208,454,207,453,206,453,205,452,204,452,203,451,202,451,201,450,200,450,199,449,198,448,197,448,196,447,195,447,194,446,193,445,192,445,191,444,190,444,189,443,188,442,187,442,186,441,185,440,184,440,183,439,182,438,181,438,180,437,179,436,178,436,177,435,176,434,175,433,174,432,173,432,172,431,171,430,170,429,169,428,168,428,167,427,166,426,165,425,164,424,163,423,162,423,161,422,160,421,159,420,158,419,157,418,156,417,155,416,154,415,153,414,152,413,151,412,150,411,149,410,148,409,147,408,146,407,145,406,144,405,143,404,142,403,141,402,141,401,140,400,139,399,138,398,137,397,136,396,136,395,135,394,134,393,133,392,132,391,132,390,131,389,130,388,129,387,129,386,128,385,127,384,126,383,126,382,125,381,124,380,124,379,123,378,123,377,122,376,121,375,121,374,120,373,119,372,119,371,118,370,117,369,117,368,116,367,116,366,115,365,115,364,114,363,113,362,113,361,112,360,112,359,111,358,111,357,110,356,110,355,109,354,109,353,108,352,108,351,107,350,107,349,106,348,106,347,105,346,105,345,105,344,104,343,104,342,103,341,103,340,103,339,102,338,102,337,101,336,101,335,101,334,100,333,100,332,100,331,99,330,99,329,98,328,98,327,98,326,97,325,97,324,97,323,96,322,96,321,96,320,96,319,95,318,95,317,95,316,95,315,94,314,94,

-1
 };//remeber to add -1 at end

const int stepsPerRevolution = 2048;
Stepper stepperX = Stepper(stepsPerRevolution, 5, 3, 4, 2);
Stepper stepperY = Stepper(stepsPerRevolution, 11, 9, 10, 8);
Stepper stepperZ = Stepper(stepsPerRevolution, A11, A9, A10, A8);

void setup() {
  stepperX.setSpeed(12);
  stepperY.setSpeed(12);
  stepperZ.setSpeed(12);
  pinMode(zD,INPUT_PULLUP);
  pinMode(zU,INPUT_PULLUP);
  pinMode(str,INPUT_PULLUP);
  pinMode(13,OUTPUT);
  Serial.begin(9600);
  //establishContact();  

  Serial.println("Set Start");
//  while (1 == 1){
//  xValue = analogRead(VRX_PIN);
//  yValue = analogRead(VRY_PIN);
//  //Serial.println(xValue);
////  Serial.print("    ");
////  Serial.println(yValue);
//  start = digitalRead(str);
//  zUC = digitalRead(zU);
//  zDC = digitalRead(zD);
//
//    
//  if(zUC == 0){
//    stepperZ.step(-1);
//    digitalWrite(13, HIGH);
//    
//    }
//  else if (zDC == 0){
//    stepperZ.step(1); 
//    digitalWrite(13, LOW);
//  }
//  
//  if(xValue > 900 ){
//    stepperY.step(-1);
//    yMeasure--;
//  }
//  else if(xValue < 100){
//    stepperY.step(1);
//    yMeasure++;
//  }
//
//  if(yValue > 900){
//    stepperX.step(-1);
//    xMeasure--;
//  }
//  else if(yValue < 100){
//    stepperX.step(1);
//    xMeasure++;
//  }
//
//  if (zUC == 0){
//    xMeasure = 0;
//    yMeasure = 0;
//    }
//    
//  if(zDC == 0){
////    Serial.print(xMeasure);
////    Serial.print("    ");
////    Serial.println(yMeasure);
//    }
//  }
//   if (i == 0){
//              point (vect[i],vect[i+1]);
//              i = i + 2;
//              delay(500);
//              stepperZ.step(ZSteps);
//        }
}

void loop() {
  Serial.println("print begin");
//  if(vect[i] != -1){
//    point(vect[i],vect[i+1]);
//    i = i + 2;
//    Serial.println("needle down");
//    for (int l; l < 100; l++){
//    stepperZ.step(1);
//  }
while(vect[i] > -1){
    if(k == 0){
//      if (i == 0){
//              point (vect[i],vect[i+1]);
//              i = i + 2;
//              stepperZ.step(ZSteps);
//        }
            point (vect[i],vect[i+1]);
              i = i + 2;
//            if(vect[i] != -1 && abs(vect[i-2] - vect[i]) != 1 && abs(vect[i - 1] - vect[i + 1]) != 1){
//                Serial.println("break");
//                point(vect[i-2],vect[i - 1]);
//                i++;
//                i++;
//
//                k = ZSteps;
//            }
    }
//    while (k > ZSteps/2){
//        stepperZ.step(1);
//        k--;
//    }
//
//    if(k == ZSteps/2){
//        point (vect[i++],vect[i++]);
//        k--;
//    }
//
//    while(k < ZSteps/2 && k > 0){
//        stepperZ.step(-1);
//        k--;
//    }
}
//
if (vect[i] == -1){
  Serial.println("done");
  stepperZ.step(-ZSteps);
  point(width/2,height/2);
  i = -2;
  }
}

bool point(double xf, double yf){
  double xC = (xf*boardx)/(width);
  double yC = (yf*boardy)/(height);
  double xD = (xC-x);
  double yD = (yC-y);
//  if (xD / xDP < 0){
//    if(xD > 0){
//      stepperX.step(xLag);
//      }
//    else{
//      stepperX.step(-xLag);
//      }
//    }
//  if (yD / yDP < 0){
//    if(yD > 0){
//      stepperY.step(yLag);
//      }
//    else{
//      stepperY.step(-yLag);
//      }
//    }
  Serial.println(xD);
  stepperX.step(xD*xTrue);
  Serial.println(yD);
  stepperY.step(yD*yTrue);
//  if (xD != 0){
//     xDP = xD;
//    }
//  if (yD != 0){
//     yDP = yD;
//    }
  x = xC;
  y = yC;
  return 1;
  }

  void establishContact() {
  while (Serial.available() <= 0) {
    Serial.print('A');   // send a capital A
    delay(300);
  }
}
